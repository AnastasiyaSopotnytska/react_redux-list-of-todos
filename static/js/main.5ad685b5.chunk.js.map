{"version":3,"sources":["store/actions.ts","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","API/api.ts","components/TodoList/TodoList.tsx","App.tsx","store/index.ts","index.tsx"],"names":["SET_TODOS","ADD_TODO","SET_USER","CLEAR_USER","getTodosSelector","state","todos","getUserSelector","user","CurrentUser","useSelector","dispatch","useDispatch","className","id","type","onClick","name","email","phone","API_URL","TodoList","selectedUser","useState","title","setTitle","status","setStatus","filteredTodos","filter","todo","includes","useEffect","fetch","then","response","ok","Error","json","todosFromServer","payload","getUser","getUserById","userFromServer","value","onChange","event","target","allTodos","completed","filteredTodosByStatus","map","classNames","readOnly","checked","userId","App","initialState","store","createStore","action","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ad685b5.chunk.js","sourcesContent":["import { Action, Todo, User } from '../react-app-env';\n\nexport const SET_TODOS = 'SET_TODOS';\nexport const ADD_TODO = 'ADD_TODO';\nexport const SET_USER = 'SET_USER';\nexport const CLEAR_USER = 'CLEAR_USER';\n\nexport const setTodosAction = (payload: Todo[]): Action => ({\n  type: SET_TODOS,\n  payload,\n});\n\nexport const addTodoAction = (payload: Todo): Action => ({\n  type: ADD_TODO,\n  payload,\n});\n\nexport const setUserAction = (payload: User): Action => ({\n  type: SET_USER,\n  payload,\n});\n\nexport const removeUserAction = () => ({\n  type: CLEAR_USER,\n});\n","import { State } from '../react-app-env';\n\nexport const getTodosSelector = (state: State) => state.todos;\n\nexport const getUserSelector = (state: State) => state.user;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { removeUserAction } from '../../store/actions';\nimport { getUserSelector } from '../../store/selectors';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getUserSelector);\n  const dispatch = useDispatch();\n\n  if (!user) {\n    return <p>No selected user</p>;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${user.id}`}</span>\n      </h2>\n\n      <button\n        type=\"button\"\n        onClick={() => {\n          dispatch(removeUserAction());\n        }}\n      >\n        Clear\n      </button>\n\n      <h3 className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n    </div>\n  );\n};\n","import { Todo, User } from '../react-app-env';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport const getTodo = (): Promise<Todo[]> => {\n  return fetch(`${API_URL}/todos`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('User Error');\n      }\n\n      return response.json();\n    });\n};\n\nexport const getUserById = (id: number): Promise<User> => {\n  return fetch(`${API_URL}/users/${id}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('User Error');\n      }\n\n      return response.json();\n    });\n};\n","import classNames from 'classnames';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodo, getUserById } from '../../API/api';\nimport { Todo } from '../../react-app-env';\nimport { setTodosAction, setUserAction } from '../../store/actions';\nimport { getTodosSelector, getUserSelector } from '../../store/selectors';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodosSelector);\n  const selectedUser = useSelector(getUserSelector);\n\n  const [title, setTitle] = useState('');\n  const [status, setStatus] = useState('');\n\n  const filteredTodos = todos.filter(todo => todo.title.includes(title));\n\n  useEffect(() => {\n    getTodo()\n      .then(todosFromServer => dispatch(setTodosAction(todosFromServer)));\n  }, []);\n\n  const getUser = (id: number) => {\n    getUserById(id)\n      .then(userFromServer => dispatch(setUserAction(userFromServer)));\n  };\n\n  const filteredTodosByStatus = (allTodos: Todo[]) => {\n    switch (status) {\n      case 'active': {\n        return allTodos.filter(todo => !todo.completed);\n      }\n\n      case 'completed': {\n        return allTodos.filter(todo => todo.completed);\n      }\n\n      default: {\n        return allTodos;\n      }\n    }\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <p>Filter todos by title: </p>\n        <input\n          type=\"text\"\n          value={title}\n          onChange={event => setTitle(event.target.value)}\n        />\n        <p>Filter todos by status: </p>\n        <select\n          onChange={event => setStatus(event.target.value)}\n        >\n          <option value=\"all\">\n            All\n          </option>\n          <option value=\"active\">\n            Active\n          </option>\n          <option value=\"completed\">\n            Completed\n          </option>\n        </select>\n        <ul className=\"TodoList__list\">\n          {filteredTodosByStatus(filteredTodos).map((todo) => (\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item', {\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classNames('TodoList__user-button', 'button', {\n                  'TodoList__user-button--selected':\n                    selectedUser?.id === todo.userId,\n                })}\n                type=\"button\"\n                onClick={() => {\n                  getUser(todo.userId);\n                }}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import './App.scss';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { TodoList } from './components/TodoList/TodoList';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore } from 'redux';\nimport { Action, State } from '../react-app-env';\nimport {\n  ADD_TODO, CLEAR_USER, SET_TODOS, SET_USER,\n} from './actions';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n\n    case SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case CLEAR_USER:\n      return {\n        ...state,\n        user: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport { store } from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}